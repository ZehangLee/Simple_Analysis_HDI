}
}
#snp43
snp43 = c()
for (i in 1:nrow(data)) {
if (data$snp4[i]==3) {
snp43[i]=1
} else  {
snp43[i]=0
}
}
#snp51
snp51 = c()
for (i in 1:nrow(data)) {
if (data$snp5[i]==1) {
snp51[i]=1
} else  {
snp51[i]=0
}
}
#snp53
snp53 = c()
for (i in 1:nrow(data)) {
if (data$snp5[i]==3) {
snp53[i]=1
} else  {
snp53[i]=0
}
}
#snp61
snp61 = c()
for (i in 1:nrow(data)) {
if (data$snp6[i]==1) {
snp61[i]=1
} else  {
snp61[i]=0
}
}
#snp63
snp63 = c()
for (i in 1:nrow(data)) {
if (data$snp6[i]==3) {
snp63[i]=1
} else  {
snp63[i]=0
}
}
#snp71
snp71 = c()
for (i in 1:nrow(data)) {
if (data$snp7[i]==1) {
snp71[i]=1
} else  {
snp71[i]=0
}
}
#snp73
snp73 = c()
for (i in 1:nrow(data)) {
if (data$snp7[i]==3) {
snp73[i]=1
} else  {
snp73[i]=0
}
}
#snp81
snp81 = c()
for (i in 1:nrow(data)) {
if (data$snp8[i]==1) {
snp81[i]=1
} else  {
snp81[i]=0
}
}
#snp83
snp83 = c()
for (i in 1:nrow(data)) {
if (data$snp8[i]==3) {
snp83[i]=1
} else  {
snp83[i]=0
}
}
y = data$conc
X = cbind(rep(1, 100), snp11, snp13, snp21, snp23, snp31, snp33, snp41, snp43, snp51, snp53,
snp61, snp63, snp71, snp73, snp81, snp83)
Xnew=X
dim(X)
linmod.stan ="
data {
int N; //the number of observations
int N2; //the size of the new_X matrix
int K; //the number of columns in the model matrix
real y[N]; //the response
matrix[N,K] X; //the model matrix
matrix[N2,K] new_X; //the matrix for the predicted values
}
parameters {
vector[K] beta; //the regression parameters
real sigma; //the standard deviation
}
transformed parameters {
vector[N] linpred;
linpred <- X*beta;
}
model {
for(i in 1:K)
beta[i] ~ normal(0,100);//prior for the slopes following Gelman 2008
y ~ normal(linpred,sigma);
}
generated quantities {
vector[N2] y_pred;
y_pred <- new_X*beta; //the y values predicted by the model
}
"
fit = stan(model_code=linmod.stan, data=list(N=length(y),K=ncol(X),N2=length(y),y=y,X=X,new_X=Xnew),
iter=5000, pars = c("beta","sigma","y_pred"))
library(coda)
post_beta<-As.mcmc.list(fit,pars="beta")
apply(extract(fit,pars="beta")$beta,2,function(x) mean(x>0))
plot(fit,pars=c("beta","sigma"))
ypred=extract(fit,par="y_pred")[[1]]
post.pred.mean=apply(ypred, 2, mean)
post.pred.q025=apply(ypred, 2, quantile,p=0.025)
post.pred.q975=apply(ypred, 2, quantile,p=0.975)
rr=range(post.pred.mean,post.pred.q025,post.pred.q975)
oo=order(y)
plot(y[oo],post.pred.mean[oo],type="p",ylim=rr,xlim=rr,col=1,pch=19,cex=2,xlab="Observed",ylab="Predicted")
lines(smooth.spline(x=y[oo],y=post.pred.q025[oo],spar = 0.5),col=2,lwd=2)
lines(smooth.spline(x=y[oo],y=post.pred.q975[oo],spar = 0.5),col=2,lwd=2)
abline(0,1,col=3,lwd=3,lty=2)
set.seed(17)
library(rstan)
library(coda)
dat=read.csv("D:\\R script\\R script Bayesian Inference\\gendata.csv",header = TRUE,sep=";",row.names = 1)
dummy.dat=matrix(data = NA,nrow = nrow(dat),ncol = 3*(ncol(dat)-1))
for (i in 1:100){
for (j in 2:9){
col.index=(j-2)*3
if(dat[i,j]==1){
dummy.dat[i,col.index+1]=1
}else if(dat[i,j]==2){
dummy.dat[i,col.index+2]=1
}else if(dat[i,j]==3){
dummy.dat[i,col.index+3]=1
}
}
}
dummy.dat[is.na(dummy.dat)]=0
dummy.dat=data.frame(dummy.dat)
colnames(dummy.dat)=c("spn1.1","spn1.2","spn1.3",
"spn2.1","spn2.2","spn2.3",
"spn3.1","spn3.2","spn3.3",
"spn4.1","spn4.2","spn4.3",
"spn5.1","spn5.2","spn5.3",
"spn6.1","spn6.2","spn6.3",
"spn7.1","spn7.2","spn7.3",
"spn8.1","spn8.2","spn8.3")
dummy.dat=cbind(dat[,1],dummy.dat)
colnames(dummy.dat)[1]="conc"
dummy.dat$conc=log(dummy.dat$conc)
y=dummy.dat$conc
X=dummy.dat[,2:25]
Xnew=X
linmod.stan ="
data {
int N; //the number of observations
int N2; //the size of the new_X matrix
int K; //the number of columns in the model matrix
real y[N]; //the response
matrix[N,K] X; //the model matrix
matrix[N2,K] new_X; //the matrix for the predicted values
}
parameters {
vector[K] beta; //the regression parameters
real sigma; //the standard deviation
}
transformed parameters {
vector[N] linpred;
linpred <- X*beta;
}
model {
for(i in 1:K)
beta[i] ~ normal(0,100);//prior for the slopes following Gelman 2008
y ~ normal(linpred,sigma);
}
generated quantities {
vector[N2] y_pred;
y_pred <- new_X*beta; //the y values predicted by the model
}
"
fit = stan(model_code=linmod.stan, data=list(N=length(y),K=ncol(X),N2=length(y),y=y,X=X,new_X=Xnew), iter=5000, pars = c("beta","sigma","y_pred"))
post_beta<-As.mcmc.list(fit,pars="beta")
plot(post_beta)
apply(extract(fit,pars="beta")$beta,2,function(x) mean(x>0))
#pairs(fit,pars="beta")
plot(fit,pars=c("beta","sigma"))
ypred=extract(fit,par="y_pred")[[1]]
post.pred.mean=apply(ypred, 2, mean)
post.pred.q025=apply(ypred, 2, quantile,p=0.025)
post.pred.q975=apply(ypred, 2, quantile,p=0.975)
rr=range(post.pred.mean,post.pred.q025,post.pred.q975)
oo=order(y)
plot(y[oo],post.pred.mean[oo],type="p",ylim=rr,xlim=rr,col=1,pch=19,cex=2,xlab="Observed",ylab="Predicted")
lines(smooth.spline(x=y[oo],y=post.pred.q025[oo],spar = 0.5),col=2,lwd=2)
lines(smooth.spline(x=y[oo],y=post.pred.q975[oo],spar = 0.5),col=2,lwd=2)
abline(0,1,col=3,lwd=3,lty=2)
plot(fit,pars=c("beta","sigma"))
set.seed(17)
library(rstan)
library(coda)
dat=read.csv("D:\\R script\\R script Bayesian Inference\\gendata.csv",header = TRUE,sep=";",row.names = 1)
dummy.dat=matrix(data = NA,nrow = nrow(dat),ncol = 3*(ncol(dat)-1))
for (i in 1:100){
for (j in 2:9){
col.index=(j-2)*3
if(dat[i,j]==1){
dummy.dat[i,col.index+1]=1
}else if(dat[i,j]==2){
dummy.dat[i,col.index+2]=1
}else if(dat[i,j]==3){
dummy.dat[i,col.index+3]=1
}
}
}
dummy.dat[is.na(dummy.dat)]=0
dummy.dat=data.frame(dummy.dat)
colnames(dummy.dat)=c("spn1.1","spn1.2","spn1.3",
"spn2.1","spn2.2","spn2.3",
"spn3.1","spn3.2","spn3.3",
"spn4.1","spn4.2","spn4.3",
"spn5.1","spn5.2","spn5.3",
"spn6.1","spn6.2","spn6.3",
"spn7.1","spn7.2","spn7.3",
"spn8.1","spn8.2","spn8.3")
dummy.dat=cbind(dat[,1],dummy.dat)
colnames(dummy.dat)[1]="conc"
dummy.dat$conc=log(dummy.dat$conc)
y=dummy.dat$conc
X=cbind(1,dummy.dat[,2:25])
Xnew=X
linmod.stan ="
data {
int N; //the number of observations
int N2; //the size of the new_X matrix
int K; //the number of columns in the model matrix
real y[N]; //the response
matrix[N,K] X; //the model matrix
matrix[N2,K] new_X; //the matrix for the predicted values
}
parameters {
vector[K] beta; //the regression parameters
real sigma; //the standard deviation
}
transformed parameters {
vector[N] linpred;
linpred <- X*beta;
}
model {
for(i in 1:K)
beta[i] ~ normal(0,100);//prior for the slopes following Gelman 2008
y ~ normal(linpred,sigma);
}
generated quantities {
vector[N2] y_pred;
y_pred <- new_X*beta; //the y values predicted by the model
}
"
fit = stan(model_code=linmod.stan, data=list(N=length(y),K=ncol(X),N2=length(y),y=y,X=X,new_X=Xnew), iter=5000, pars = c("beta","sigma","y_pred"))
post_beta<-As.mcmc.list(fit,pars="beta")
plot(post_beta)
apply(extract(fit,pars="beta")$beta,2,function(x) mean(x>0))
#pairs(fit,pars="beta")
plot(fit,pars=c("beta","sigma"))
ypred=extract(fit,par="y_pred")[[1]]
post.pred.mean=apply(ypred, 2, mean)
post.pred.q025=apply(ypred, 2, quantile,p=0.025)
post.pred.q975=apply(ypred, 2, quantile,p=0.975)
rr=range(post.pred.mean,post.pred.q025,post.pred.q975)
oo=order(y)
plot(y[oo],post.pred.mean[oo],type="p",ylim=rr,xlim=rr,col=1,pch=19,cex=2,xlab="Observed",ylab="Predicted")
lines(smooth.spline(x=y[oo],y=post.pred.q025[oo],spar = 0.5),col=2,lwd=2)
lines(smooth.spline(x=y[oo],y=post.pred.q975[oo],spar = 0.5),col=2,lwd=2)
abline(0,1,col=3,lwd=3,lty=2)
set.seed(17)
library(rstan)
library(coda)
dat=read.csv("D:\\R script\\R script Bayesian Inference\\gendata.csv",header = TRUE,sep=";",row.names = 1)
dummy.dat=matrix(data = NA,nrow = nrow(dat),ncol = 3*(ncol(dat)-1))
for (i in 1:100){
for (j in 2:9){
col.index=(j-2)*3
if(dat[i,j]==1){
dummy.dat[i,col.index+1]=1
}else if(dat[i,j]==2){
dummy.dat[i,col.index+2]=1
}else if(dat[i,j]==3){
dummy.dat[i,col.index+3]=1
}
}
}
dummy.dat[is.na(dummy.dat)]=0
dummy.dat=data.frame(dummy.dat)
colnames(dummy.dat)=c("spn1.1","spn1.2","spn1.3",
"spn2.1","spn2.2","spn2.3",
"spn3.1","spn3.2","spn3.3",
"spn4.1","spn4.2","spn4.3",
"spn5.1","spn5.2","spn5.3",
"spn6.1","spn6.2","spn6.3",
"spn7.1","spn7.2","spn7.3",
"spn8.1","spn8.2","spn8.3")
dummy.dat=cbind(dat[,1],dummy.dat)
colnames(dummy.dat)[1]="conc"
dummy.dat$conc=log(dummy.dat$conc)
y=dummy.dat$conc
X=dummy.dat[,2:25]
Xnew=X
linmod.stan ="
data {
int N; //the number of observations
int N2; //the size of the new_X matrix
int K; //the number of columns in the model matrix
real y[N]; //the response
matrix[N,K] X; //the model matrix
matrix[N2,K] new_X; //the matrix for the predicted values
}
parameters {
vector[K] beta; //the regression parameters
real sigma; //the standard deviation
}
transformed parameters {
vector[N] linpred;
linpred <- X*beta;
}
model {
for(i in 1:K)
beta[i] ~ normal(0,100);//prior for the slopes following Gelman 2008
y ~ normal(linpred,sigma);
}
generated quantities {
vector[N2] y_pred;
y_pred <- new_X*beta; //the y values predicted by the model
}
"
fit = stan(model_code=linmod.stan, data=list(N=length(y),K=ncol(X),N2=length(y),y=y,X=X,new_X=Xnew), iter=5000, pars = c("beta","sigma","y_pred"))
post_beta<-As.mcmc.list(fit,pars="beta")
plot(post_beta)
apply(extract(fit,pars="beta")$beta,2,function(x) mean(x>0))
#pairs(fit,pars="beta")
plot(fit,pars=c("beta","sigma"))
ypred=extract(fit,par="y_pred")[[1]]
post.pred.mean=apply(ypred, 2, mean)
post.pred.q025=apply(ypred, 2, quantile,p=0.025)
post.pred.q975=apply(ypred, 2, quantile,p=0.975)
rr=range(post.pred.mean,post.pred.q025,post.pred.q975)
oo=order(y)
plot(y[oo],post.pred.mean[oo],type="p",ylim=rr,xlim=rr,col=1,pch=19,cex=2,xlab="Observed",ylab="Predicted")
lines(smooth.spline(x=y[oo],y=post.pred.q025[oo],spar = 0.5),col=2,lwd=2)
lines(smooth.spline(x=y[oo],y=post.pred.q975[oo],spar = 0.5),col=2,lwd=2)
abline(0,1,col=3,lwd=3,lty=2)
knitr::opts_chunk$set(echo = TRUE)
set.seed(17)
library(rstan)
library(coda)
dat=read.csv("D:\\R script\\R script Bayesian Inference\\gendata.csv",header = TRUE,sep=";",row.names = 1)
str(dat)
dummy.dat=matrix(data = NA,nrow = nrow(dat),ncol = 3*(ncol(dat)-1))
for (i in 1:100){
for (j in 2:9){
col.index=(j-2)*3
if(dat[i,j]==1){
dummy.dat[i,col.index+1]=1
}else if(dat[i,j]==2){
dummy.dat[i,col.index+2]=1
}else if(dat[i,j]==3){
dummy.dat[i,col.index+3]=1
}
}
}
dummy.dat[is.na(dummy.dat)]=0
dummy.dat=data.frame(dummy.dat)
colnames(dummy.dat)=c("spn1.1","spn1.2","spn1.3",
"spn2.1","spn2.2","spn2.3",
"spn3.1","spn3.2","spn3.3",
"spn4.1","spn4.2","spn4.3",
"spn5.1","spn5.2","spn5.3",
"spn6.1","spn6.2","spn6.3",
"spn7.1","spn7.2","spn7.3",
"spn8.1","spn8.2","spn8.3")
dummy.dat=cbind(dat[,1],dummy.dat)
colnames(dummy.dat)[1]="conc"
knitr::opts_chunk$set(echo = TRUE)
set.seed(17)
library(rstan)
library(coda)
dat=read.csv("D:\\R script\\R script Bayesian Inference\\gendata.csv",header = TRUE,sep=";",row.names = 1)
str(dat)
dummy.dat=matrix(data = NA,nrow = nrow(dat),ncol = 3*(ncol(dat)-1))
for (i in 1:100){
for (j in 2:9){
col.index=(j-2)*3
if(dat[i,j]==1){
dummy.dat[i,col.index+1]=1
}else if(dat[i,j]==2){
dummy.dat[i,col.index+2]=1
}else if(dat[i,j]==3){
dummy.dat[i,col.index+3]=1
}
}
}
dummy.dat[is.na(dummy.dat)]=0
dummy.dat=data.frame(dummy.dat)
colnames(dummy.dat)=c("spn1.1","spn1.2","spn1.3",
"spn2.1","spn2.2","spn2.3",
"spn3.1","spn3.2","spn3.3",
"spn4.1","spn4.2","spn4.3",
"spn5.1","spn5.2","spn5.3",
"spn6.1","spn6.2","spn6.3",
"spn7.1","spn7.2","spn7.3",
"spn8.1","spn8.2","spn8.3")
dummy.dat=cbind(dat[,1],dummy.dat)
colnames(dummy.dat)[1]="conc"
View(dummy.dat)
install.packages("INLA")
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
shiny::runApp('hdi')
install.packages("plotly")
library(plotly)
runApp('hdi')
runApp('hdi')
heal.life1=hdi.databank.m %>%
filter( Region %in% c("China","Angola","Latin America and the Caribbean")) %>%
filter((year>= 2013) & (year<= 2016)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
group_by(year,country_name)
View(heal.life1)
View(heal.life1)
heal.life1=hdi.databank.m %>%
filter( Region %in% c("China","Angola")) %>%
filter((year>= 2013) & (year<= 2016)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
group_by(year,country_name)
View(heal.life1)
heal.life1=hdi.databank.m %>%
filter( country_name %in% c("China","Angola")) %>%
filter((year>= 2013) & (year<= 2016)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
group_by(year,country_name)
View(heal.life1)
ggplot(data=heal.life1,aes(x=year,y=hdi,fill=country_name))+geom_line()
ggplot(data=heal.life1,aes(x=year,y=hdi))+geom_line()
ggplot(data=heal.life1,aes(x=year,y=hdi))+geom_point()
ggplot(data=heal.life1,aes(x=year,y=hdi))+geom_line(aes(linetype = country_name))
View(heal.life1)
ggplot(data=heal.life1,aes(x=year,y=hdi,group = 1))+geom_line(aes(linetype = country_name))
ggplot(data=heal.life1,aes(x=year,y=hdi,group = 2))+geom_line(aes(linetype = country_name))
View(heal.life1)
as.numeric
ggplot(data=heal.life1,aes(x=as.numeric(year),y=hdi))+geom_line(aes(linetype = country_name))
heal.life1=hdi.databank.m %>%
filter( country_name %in% c("China","Angola")) %>%
filter((year>= 2000) & (year<= 2016)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
group_by(year,country_name)
ggplot(data=heal.life1,aes(x=as.numeric(year),y=hdi))+geom_line(aes(linetype = country_name))
View(heal.life1)
heal.life1=hdi.databank.m %>%
filter( country_name %in% c("China","Angola")) %>%
filter((year>= 2000) & (year<= 2016)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
group_by(year,country_name)%>% select(Region,year,hdi)
View(heal.life1)
heal.life1=hdi.databank.m %>%
filter( country_name %in% c("China","Angola")) %>%
filter((year>= 2000) & (year<= 2016)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
group_by(year,country_name)%>% select(country_name,year,hdi)
View(heal.life1)
View(heal.life1)
runApp('hdi')
runApp('hdi')
if(plot_type=="life.plot")
runApp('hdi')
ggplot(data=heal.life1,aes(x=numeric(year),y=hdi))+geom_line(aes(linetype = factor(country_name)))
ggplot(data=heal.life1,aes(x=numeric(year),y=hdi))+geom_line(aes(linetype = country_name))
heal.life1=hdi.databank.m %>%
filter( country_name %in% c("China","Angola")) %>%
filter((year>= 2000) & (year<= 2016)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
group_by(year,country_name)%>% select(country_name,year,hdi)
ggplot(data=heal.life1,aes(x=numeric(year),y=hdi))+geom_line(aes(linetype = country_name))
ggplot(data=heal.life1,aes(x=as.integer(year),y=hdi))+geom_line(aes(linetype = country_name))
heal.life1=hdi.databank.m %>%
filter( level %in% c("VERY HIGH HUMAN DEVELOPMENT","LOW HUMAN DEVELOPMENT","MEDIUM HUMAN DEVELOPMENT","HIGH HUMAN DEVELOPMENT")) %>%
filter((year>= 2000) & (year<= 2016)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
group_by(year,country_name)%>% select(country_name,year,hdi)
ggplot(data=heal.life1,aes(x=as.integer(year),y=hdi))+geom_line(aes(linetype = level))
View(heal.life1)
heal.life1=hdi.databank.m %>%
filter( level %in% c("VERY HIGH HUMAN DEVELOPMENT","LOW HUMAN DEVELOPMENT","MEDIUM HUMAN DEVELOPMENT","HIGH HUMAN DEVELOPMENT")) %>%
filter((year>= 2000) & (year<= 2016)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
group_by(year,level)%>% select(level,year,hdi)
ggplot(data=heal.life1,aes(x=as.integer(year),y=hdi))+geom_line(aes(linetype = level))
ggplot(data=heal.life1,aes(x=year,y=hdi))+geom_point()
ggplot(data=heal.life1,aes(x=year,y=hdi))+geom_point() +
geom_line()
ggplot(data=heal.life1,aes(x=as.numeric(year),y=hdi))+geom_point() +
geom_line()
ggplot(data=heal.life1,aes(x=as.numeric(year),y=hdi,group =level))+geom_point() +
geom_line()
