fit<-forecase::auto.arima(x)
fit1<-forecase::auto.arima(x2)
##
# Simulates an SARIMA (0,1,1)(0,1,1) and contaminates it with an AO
#x<-sim_sarima(200,model=list(ma=-0.5,sma=-0.5,iorder=1,siorder=1,nseasons=12),innov=a)
#x2<-sim_sarima(200,model=list(ma=-0.5,sma=-0.5,iorder=1,siorder=1,nseasons=12),innov=a2)
#fit<-arima(x,order=c(0,1,1),seasonal=c(0,1,1),fixed=c(-0.5,-0.6))
#fit1<-arima(x2,order=c(0,1,1),seasonal=c(0,1,1),fixed=c(-0.5,-0.6))
#
#Plots
par(mfrow= c(3,2))
plot(x,main="Uncontaminated series", type="l")
plot(x2,main="Contaminated series", type="l")
plot(fit$resid,main="Uncontaminated residuals", type="l")
plot(fit1$resid,main="Contaminated residuals", type="l")
acf(x,main="Uncontaminated series")
acf(x2,main="Contaminated series")
fit
fit1
a=rnorm(200)
a2=a
a2[50]=50
x<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a)
x2<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a2)
#fit<-arima(x,order=c(1,0,0),transform.pars=FALSE,fixed=c(0.7,0))
#fit1<-arima(x2,order=c(1,0,0),transform.pars=FALSE,fixed=c(0.7,0))
fit<-forecase::auto.arima(x)
fit1<-forecase::auto.arima(x2)
fit;fit1
a=rnorm(200)
a2=a
a2[50]=50
x<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a)
x2<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a2)
#fit<-arima(x,order=c(1,0,0),transform.pars=FALSE,fixed=c(0.7,0))
#fit1<-arima(x2,order=c(1,0,0),transform.pars=FALSE,fixed=c(0.7,0))
fit<-forecase::auto.arima(x)
fit1<-forecase::auto.arima(x2)
fit;fit1
a=rnorm(200)
a2=a
a2[50]=50
x<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a)
x2<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a2)
#fit<-arima(x,order=c(1,0,0),transform.pars=FALSE,fixed=c(0.7,0))
#fit1<-arima(x2,order=c(1,0,0),transform.pars=FALSE,fixed=c(0.7,0))
fit<-forecast::auto.arima(x)
fit1<-forecast::auto.arima(x2)
fit;fit1
library(forcast)
library(forecast)
tso(x,cval=3.6,type="AO")
install.packages("tsoutlier")
install.packages("tsoutliers")
tso(x,cval=3.6,type="AO")
tsoutliers::tso(x,cval=3.6,type="AO")
tsoutliers::tso(x,cval=3.6,type=c("AO",'IO',"LS","TC"))
tsoutliers::tso(x2,cval=3.6,type=c("AO",'IO',"LS","TC"))
tsoutliers::tso(x,cval=3.6,type=c("AO",'IO',"LS","TC"))
#Simulates an AR(1) process with phi=0.7, contaminates it with an AO of magnitude 5
a=rnorm(200)
a2=a
a2[50]=5
x<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a)
x2<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a2)
tsoutliers::tso(x2,cval=3.6,type=c("AO",'IO',"LS","TC"))
#Simulates an AR(1) process with phi=0.7, contaminates it with an AO of magnitude 5
a=rnorm(200)
a2=a
a2[50]=50
x<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a)
x2<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a2)
tsoutliers::tso(x2,cval=3.6,type=c("AO",'IO',"LS","TC"))
a=rnorm(200)
a2=a
a2[50]=50
a2[55]=5
a2[57]=5
x<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a)
x2<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a2)
tsoutliers::tso(x2,cval=3.6,type=c("AO",'IO',"LS","TC"))
a=rnorm(200)
a2=a
a2[50]=5
a2[55]=5
a2[57]=5
x<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a)
x2<-arima.sim(200,model=list(order=c(1,0,0),ar=0.7),innov=a2)
tsoutliers::tso(x2,cval=3.6,type=c("AO",'IO',"LS","TC"))
source("hdi.R")
shiny::runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
library(openxlsx)
library(openxlsx)
library(tidyverse)
hdi.databank=read.xlsx("http://hdr.undp.org/sites/default/files/2018_all_indicators.xlsx")
temp2 <- tempfile()
download.file("http://hdr.undp.org/sites/default/files/2018_statistical_annex_all.xlsx",temp2, mode="wb")
hdi.stat <- readxl::read_xlsx(temp2,sheet = 1,range = "A3:M198")
unlink(temp2)
rm(temp2)
###tidy table hdi.databank
year=as.character(seq(1990,2017))
hdi.databank=hdi.databank%>%select(-"9999")%>%gather(one_of(year),key = "year",value = "hdi")
###tidy table hdi.stat
colnames(hdi.stat)=gsub(" ",".",colnames(hdi.stat))
colnames(hdi.stat)[c(1,2)]=c("HDI.rank","Country")
hdi.stat%>%slice(-c(1,2))%>%select(-c(4,6,8,10,12))->hdi.stat
level_one <- hdi.stat %>% select(Country) %>% filter (startsWith(Country,'VERY')) %>% pull
level_two <- hdi.stat %>% select(Country) %>% filter (startsWith(Country,'HIGH')) %>% pull
level_three <- hdi.stat %>% select(Country) %>% filter (startsWith(Country,'MEDIUM')) %>% pull
level_four <- hdi.stat %>% select(Country) %>% filter (startsWith(Country,'LOW')) %>% pull
level_one_index= which(hdi.stat$Country==level_one)
level_two_index= which(hdi.stat$Country==level_two)
level_three_index= which(hdi.stat$Country==level_three)
level_four_index=which(hdi.stat$Country==level_four)
hdi.stat.m=rbind(hdi.stat%>%slice((level_one_index+1):(level_two_index-1))%>%mutate(level=level_one),
hdi.stat%>%slice((level_two_index+1):(level_three_index-1))%>%mutate(level=level_two),
hdi.stat%>%slice((level_three_index+1):(level_four_index-1))%>%mutate(level=level_three),
hdi.stat%>%slice((level_four_index+1):nrow(hdi.stat))%>%mutate(level=level_four))
#merge level information from hdi.stat table
hdi.databank.m=hdi.databank%>%mutate(level=hdi.stat.m$level[match(hdi.databank$country_name,hdi.stat.m$Country)])%>%filter(!is.na(level))
#add region column to hdi.databank.m
hdi.databank.m$Region=rep(".",nrow(hdi.databank.m))
### East Asia and Pacific
hdi.databank.m[which(hdi.databank.m$country_name %in% c("Australia","Brunei Darussalam","Cambodia","China","Fiji",
"Hong Kong, China (SAR)","Indonesia","Japan","Kiribati",
"Korea (Republic of)", "Lao People's Democratic Republic",
"Malaysia","Marshall Islands","Myanmar","Micronesia (Federated States of)","Mongolia",
"New Zealand","Palau","Philippines","Samoa","Singapore","Solomon Islands", "Thailand", "Timor-Leste",
"Tonga","Vanuatu", "Viet Nam")),]$Region="East Asia and Pacific"
### Europe and Central Asia
hdi.databank.m[which(hdi.databank.m$country_name %in% c("Moldova (Republic of)","Albania","Andorra","Bulgaria","Latvia",
"Armenia","Austria","Azerbaijan","Belarus","Belgium","Bosnia and Herzegovina",
"Croatia","Cyprus","Czech Republic","Czechia","Denmark","Estonia","Finland","France",
"Georgia","Germany","Greece","Hungary","Iceland","Ireland","Italy","Kazakhstan",
"Kyrgyzstan","Liechtenstein","Lithuania","Luxembourg","Montenegro","Netherlands",
"The former Yugoslav Republic of Macedonia","Norway","Poland","Portugal","Romania",
"Russian Federation","Serbia","Slovakia","Slovenia","Spain","Sweden","Switzerland",
"Tajikistan","Turkey","Turkmenistan","Ukraine","United Kingdom","Uzbekistan")),]$Region="Europe and Central Asia"
### Latin America and the Caribbean
hdi.databank.m[which(hdi.databank.m$country_name %in% c("Antigua and Barbuda","Argentina","Bahamas","Barbados","Belize","Bolivia (Plurinational State of)",
"Brazil","Costa Rica","Chile","Colombia","Cuba","Dominica","Dominican Republic","Ecuador","El Salvador",
"Grenada","Guatemala","Guyana","Haiti","Honduras","Jamaica","Mexico","Nicaragua","Panama","Paraguay",
"Peru","Puerto Rico","Saint Kitts and Nevis","Saint Lucia","Saint Vincent and the Grenadines","Suriname",
"Trinidad and Tobago","Uruguay","Venezuela (Bolivarian Republic of)")),]$Region="Latin America and the Caribbean"
### North America
hdi.databank.m[which(hdi.databank.m$country_name %in% c("Canada","United States")),]$Region="North America"
### Africa
hdi.databank.m[which(hdi.databank.m$country_name %in% c ("Angola","Benin","Botswana","Burkina Faso","Burundi","Cabo Verde","Cameroon","Chad","Central African Republic",
"Eswatini (Kingdom of)","CÃ´te d'Ivoire","Comoros","Congo (Democratic Republic of the)","Congo","Equatorial Guinea","Eritrea","Ethiopia","Gabon","Gambia","Swaziland",
"Ghana","Papua New Guinea","Guinea-Bissau","Kenya","Lesotho","Liberia","Madagascar","Malawi","Mali","Mauritania",
"Mauritius","Mozambique","Namibia","Niger","Nigeria","Rwanda","Sao Tome and Principe","Senegal","Seychelles","Guinea",
"Sierra Leone","South Africa","South Sudan","Sudan","Tanzania (United Republic of)","Togo","Uganda","Zambia","Zimbabwe")),]$Region="Africa"
### South Asia
hdi.databank.m[which(hdi.databank.m$country_name %in% c ("Afghanistan","Bangladesh","Bhutan","India","Maldives","Nepal","Pakistan","Sri Lanka","Palestine, State of")),]$Region="South Asia"
### Arab States
hdi.databank.m[which(hdi.databank.m$country_name %in% c ("Algeria","Bahrain","Djibouti","Egypt","Iran (Islamic Republic of)","Iraq","Jordan","Kuwait","Lebanon","Libya","Malta","Morocco",
"Israel","Oman","Qatar","Saudi Arabia","Syrian Arab Republic","Tunisia","United Arab Emirates","Yemen")),]$Region="Arab State"
View(hdi.databank.m)
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
#source("hdi.R")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
titlePanel("Simple Analysis of HDI"),
# Application title
tabsetPanel(tabPanel("Health",
sidebarLayout(
position = "right",
sidebarPanel(
fluidRow(
h3(style = "margin-left: 20px; margin-bottom: 30px;", "Please choose inquiry period"),
column(width=5,
selectInput(
inputId =  "date_from",
label = "Select start year:",
choices = 1990:2017
)),
column(width=5,offset = 2,
selectInput(
inputId =  "date_to",
label = "Select end year:",
choices = 1990:2017
)
)#column
),# fluidRow
fluidRow(
column(6,
hr(),
verbatimTextOutput('countries.out'),
selectInput('countries.in', 'Options', state.name, multiple=TRUE, selectize=TRUE)
)
)
),#sidebarPanel
mainPanel("main panel"))),
tabPanel("Education",
sidebarLayout(position = "right",
sidebarPanel("sidebar panel"),
mainPanel("main panel"))),
tabPanel("GDI",
sidebarLayout(position = "right",
sidebarPanel("sidebar panel"),
mainPanel("main panel")))
)#tabsetPanel
)#fluidPage
# Define server logic required to draw a histogram
server <- function(input, output) {
output$countries.out <- renderPrint(input$countries.in)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
View(hdi.databank.m)
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
install.packages("ggradar")
install.packages("ggradar")
devtools::install_github("ricardo-bion/ggradar",
dependencies=TRUE)
library(ggradar)
library(ggradar)
devtools::install_github("ricardo-bion/ggradar",
dependencies=TRUE)
library("glue", lib.loc="D:/R-3.5.1/library")
install.packages(c("caTools", "coin", "DAAG", "DescTools", "e1071", "Epi", "evaluate", "flexmix", "flsa", "forcats", "ggsignif", "gower", "gplots", "haven", "Hmisc", "igraph", "imager", "jomo", "knitr", "ks", "labelled", "later", "lava", "libcoin", "lme4", "loo", "maptools", "Matrix", "mclust", "mgcv", "mice", "modelr", "multcomp", "mvtnorm", "neuralnet", "openssl", "ordinal", "party", "partykit", "pbapply", "pROC", "processx", "purrr", "R6", "RcppArmadillo", "RCurl", "readxl", "registry", "rgl", "rmarkdown", "skimr", "StanHeaders", "stringi", "stringr", "sys", "TH.data", "tidyr", "tinytex", "VGAM", "VIM", "xfun", "xgboost", "zip"))
devtools::install_github("ricardo-bion/ggradar",
dependencies=TRUE)
library(ggradar)
library(ggradar)
mtcars
shiny::runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
install.packages(shinyWidgets)
install.packages("shinyWidgets")
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
hdi.databank.m %>%
filter(heal.geography.in %in% Region| heal.geography.in %in% country_name) %>%
arrange(year)
View(hdi.databank.m)
cities <- c("City A", "City B", "City C", "City D", "City E")
regions <- c("Region M", "Region N", "Region O")
countries <- c("Country Z", "Country X", "Country Y", "Country W")
geography_all <- as.factor(c(cities, regions, countries))
year <- as.factor(2011:2014)
df <- expand.grid(geography = geography_all, year = year)
df$value <- runif(48)
View(df)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= input$date_from) &(year>= input$date_to)) %>%
group_by(Region)%>%summarise(avg = mean(hdi))
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
group_by(Region)%>%summarise(avg = mean(hdi))
View(test)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia"))
View(test)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994))
View(test)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)
View(test)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)
group_by(Region)%>%summarise(avg = mean(hdi))
View(test)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)
group_by(Region)%>%summarise(avg = mean(hdi))
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)
group_by(hdi.databank.m$Region)%>%summarise(avg = mean(hdi))
hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)
group_by(as.factor(hdi.databank.m$Region))%>%summarise(avg = mean(hdi))
hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)
group_by(hdi.databank.m$Region)%>%summarise(avg = mean(hdi))
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)
group_by(hdi.databank.m$Region)
hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)
group_by(hdi.databank.m$Region)%>%summarise(hdimean=mean(hdi.databank.m$hdi))
group_by(hdi.databank.m$Region)%>%summarise(hdimean=mean(as.numeric(as.character(Sample))))
group_by(hdi.databank.m$Region)%>%summarise(hdimean=mean(as.numeric(as.character(hdi.databank.m$hdi))))
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)
group_by(hdi.databank.m,Region)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)%>%
group_by(hdi.databank.m,Region)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)%>%
group_by(hdi.databank.m,Region)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)%>%
group_by(data=hdi.databank.m,Region)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)%>%
group_by(tbl(hdi.databank.m),Region)
test=tbl(hdi.databank.m )%>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)%>%
group_by(hdi.databank.m,Region)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)%>%
group_by(Region)
View(test)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)%>%
group_by(Region)%>%summarise(avg = mean(hdi))
View(test)
View(hdi.databank.m)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)%>%
group_by(Region,indicator_name)%>%summarise(avg = mean(hdi))
View(test)
View(test)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
na.omit(hdi)%>%
group_by(year,Region,indicator_name)%>%summarise(avg = mean(hdi))
View(test)
library(ggplot2)
library(scales)
test %>%
mutate_at(avg,funs(rescale)) -> mtcars_radar
test %>%
mutate_at(test$avg,funs(rescale)) -> mtcars_radar
test %>%
mutate_at(select(avg),funs(rescale)) -> mtcars_radar
test %>%select(avg)
mutate_at(avg,funs(rescale)) -> mtcars_radar
test %>%
mutate_at(vars(avg),funs(rescale)) -> mtcars_radar
View(mtcars_radar)
test %>%
mutate_at(vars(avg),funs(rescale)) %>%spread(indicator_name,avg)
test %>%
mutate_at(vars(avg),funs(rescale)) %>%spread(indicator_name,avg)=test2
test %>%
mutate_at(vars(avg),funs(rescale)) %>%spread(indicator_name,avg)->test2
View(test2)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
replace_na(list(hdi=0))%>%
group_by(year,Region,indicator_name)%>%summarise(avg = mean(hdi))
test %>%
mutate_at(vars(avg),funs(rescale)) %>%spread(indicator_name,avg)->test2
View(test2)
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
replace_na(list(hdi=0))%>%
group_by(Region,indicator_name)%>%summarise(avg = mean(hdi))
test %>%
mutate_at(vars(avg),funs(rescale)) %>%spread(indicator_name,avg)->test2
View(test2)
ggradar(test2[,1:3])
ggradar(test2[,1:5])
test=test %>%
mutate_at(vars(avg),funs(rescale))
test=hdi.databank.m %>%
filter(Region %in% c("East Asia and Pacific","Europe and Central Asia")) %>%
filter((year>= 1992) &(year<= 1994)) %>%
replace_na(list(hdi=0))%>%
group_by(Region,indicator_name)%>%summarise(avg = mean(hdi))
test=test %>%
mutate_at(vars(avg),funs(rescale))
test%>%spread(indicator_name,avg)->test2
ggradar(test2[,1:5],grid.max=max(test$avg))
max(test$avg)
