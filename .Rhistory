group_by(year,country_name)%>%  summarise(avg = mean(hdi))
colnames(heal.life2)[2]="Region"
heal.life <- rbind(heal.life1,heal.life2)
colnames(heal.life)[2]="geo"
#
# heal.life1=hdi.databank.m %>%
#   filter( Region %in% heal.geography.in) %>%
#   filter((year>= date_from) & (year<= date_to)) %>%
#   filter( indicator_name =="Life expectancy at birth (years)")%>%
#   group_by(year,country_name)
# radar=ggradar(heal.overview.final,grid.mid = 50,grid.max = 100)
# hiv.plot=ggplot(data=heal.overview.final,mapping = aes(x=geo,y=`HIV.prevalence.adult.(per.1000.ages.15-49)`))+
#   geom_bar(stat="identity")+
#   coord_flip()
}else{
heal.overview <- hdi.databank.m %>%
filter( level %in% heal.level.in) %>%
filter((year>= date_from) & (year<= date_to)) %>%
replace_na(list(hdi=0))%>%
group_by(level,indicator_name)%>%summarise(avg = mean(hdi))
heal.overview.final=heal.overview%>%spread(indicator_name,avg)
colnames(heal.overview.final)=gsub(" ",".",colnames(heal.overview.final))
colnames(heal.overview.final)=gsub(",","",colnames(heal.overview.final))
#colnames(heal.overview.final)=gsub("(","",colnames(heal.overview.final))
#colnames(heal.overview.final)=gsub(")","",colnames(heal.overview.final))
heal.overview.final=heal.overview.final[,c("level",
"Current.health.expenditure.(%.of.GDP)",
"HIV.prevalence.adult.(%.ages.15-49)",
"Life.expectancy.at.birth.(years)",
"Mortality.rate.infant.(per.1000.live.births)",
"Mortality.rate.under-five.(per.1000.live.births)")]
heal.overview.final[is.na(heal.overview.final)]=0
heal.overview.final$`HIV.prevalence.adult.(%.ages.15-49)`=heal.overview.final$`HIV.prevalence.adult.(%.ages.15-49)`*10
colnames(heal.overview.final)[3]="HIV.prevalence.adult.(per.1000.ages.15-49)"
heal.life=hdi.databank.m %>%
filter( level %in%  heal.level.in) %>%
filter((year>= date_from) & (year<= date_to)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
select(level,year,hdi)%>%arrange(year,level)%>%drop_na(hdi)%>%
group_by(year,level)%>%  summarise(avg = mean(hdi))
# radar=ggradar(heal.overview.final,grid.mid = 50,grid.max = 100)
# hiv.plot=ggplot(data=heal.overview.final,mapping = aes(x=level,y=`HIV.prevalence.adult.(per.1000.ages.15-49)`))+
#   geom_bar(stat="identity")+
#   coord_flip()
}
return(heal.overview.final)
}
heal.level.in=as.null()
#heal.level.in=c("VERY HIGH HUMAN DEVELOPMENT","LOW HUMAN DEVELOPMENT","MEDIUM HUMAN DEVELOPMENT","HIGH HUMAN DEVELOPMENT")
heal.overview.test=test_heal_plot_fun(heal.level.in,date_from=2013,date_to=2016,
heal.geography.in=c("Arab State","Botswana","Central African Republic","Congo"),plot_type = "")
View(heal.overview.test)
ggradar(heal.overview.final,grid.mid = 50,grid.max = 100)
ggradar(heal.overview.test,grid.mid = 50,grid.max = 100)
View(heal.overview.test)
which.max(heal.overview.test)
View(heal.overview.test)
which.max(heal.overview.test[,2:6])
which.max(heal.overview.test[6])
max(heal.overview.test[6])
max(heal.overview.test)
max(heal.overview.test[2:6])
ggradar(heal.overview.test,grid.mid = 50,grid.max = max(heal.overview.test)+10)
grid.max=max(heal.overview.test)+10
max(heal.overview.test)+10
ggradar(heal.overview.test,grid.mid = 50,grid.max = max(heal.overview.test[,2:6])+10)
runApp('hdi')
test_heal_plot_fun=function(heal.level.in,heal.geography.in,date_from,date_to,plot_type){
if (is.null(heal.level.in)==TRUE){
heal.overview1 <- hdi.databank.m %>%
filter( Region %in% heal.geography.in) %>%
filter((year>= date_from) & (year<= date_to)) %>%
replace_na(list(hdi=0))%>%
group_by(Region,indicator_name)%>%summarise(avg = mean(hdi))
heal.overview2 <- hdi.databank.m %>%
filter(country_name %in% heal.geography.in) %>%
filter((year>= date_from) &(year<= date_to)) %>%
replace_na(list(hdi=0))%>%
group_by(country_name,indicator_name)%>%summarise(avg = mean(hdi))
colnames(heal.overview2)[1]="Region"
heal.overview <- rbind(heal.overview1,heal.overview2)
# heal.overview %>%
#   mutate_at(vars(avg),funs(rescale))
heal.overview.final=heal.overview%>%spread(indicator_name,avg)
colnames(heal.overview.final)[1]="geo"
colnames(heal.overview.final)=gsub(" ",".",colnames(heal.overview.final))
colnames(heal.overview.final)=gsub(",","",colnames(heal.overview.final))
#colnames(heal.overview.final)=gsub("(","",colnames(heal.overview.final))
#colnames(heal.overview.final)=gsub(")","",colnames(heal.overview.final))
heal.overview.final=heal.overview.final[,c("geo",
"Current.health.expenditure.(%.of.GDP)",
"HIV.prevalence.adult.(%.ages.15-49)",
"Life.expectancy.at.birth.(years)",
"Mortality.rate.infant.(per.1000.live.births)",
"Mortality.rate.under-five.(per.1000.live.births)")]
heal.overview.final[is.na(heal.overview.final)]=0
heal.overview.final$`HIV.prevalence.adult.(%.ages.15-49)`=heal.overview.final$`HIV.prevalence.adult.(%.ages.15-49)`*10
colnames(heal.overview.final)[3]="HIV.prevalence.adult.(per.1000.ages.15-49)"
heal.life1=hdi.databank.m %>%
filter( Region %in%  heal.geography.in) %>%
filter((year>= date_from) & (year<= date_to)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
select(Region,year,hdi)%>%arrange(year,Region)%>%drop_na(hdi)%>%
group_by(year,Region)%>%  summarise(avg = mean(hdi))
heal.life2=hdi.databank.m %>%
filter( country_name %in%  heal.geography.in) %>%
filter((year>= date_from) & (year<= date_to)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
select(country_name,year,hdi)%>%arrange(year,country_name)%>%drop_na(hdi)%>%
group_by(year,country_name)%>%  summarise(avg = mean(hdi))
colnames(heal.life2)[2]="Region"
heal.life <- rbind(heal.life1,heal.life2)
colnames(heal.life)[2]="geo"
#
# heal.life1=hdi.databank.m %>%
#   filter( Region %in% heal.geography.in) %>%
#   filter((year>= date_from) & (year<= date_to)) %>%
#   filter( indicator_name =="Life expectancy at birth (years)")%>%
#   group_by(year,country_name)
# radar=ggradar(heal.overview.final,grid.mid = 50,grid.max = 100)
# hiv.plot=ggplot(data=heal.overview.final,mapping = aes(x=geo,y=`HIV.prevalence.adult.(per.1000.ages.15-49)`))+
#   geom_bar(stat="identity")+
#   coord_flip()
}else{
heal.overview <- hdi.databank.m %>%
filter( level %in% heal.level.in) %>%
filter((year>= date_from) & (year<= date_to)) %>%
replace_na(list(hdi=0))%>%
group_by(level,indicator_name)%>%summarise(avg = mean(hdi))
heal.overview.final=heal.overview%>%spread(indicator_name,avg)
colnames(heal.overview.final)=gsub(" ",".",colnames(heal.overview.final))
colnames(heal.overview.final)=gsub(",","",colnames(heal.overview.final))
#colnames(heal.overview.final)=gsub("(","",colnames(heal.overview.final))
#colnames(heal.overview.final)=gsub(")","",colnames(heal.overview.final))
heal.overview.final=heal.overview.final[,c("level",
"Current.health.expenditure.(%.of.GDP)",
"HIV.prevalence.adult.(%.ages.15-49)",
"Life.expectancy.at.birth.(years)",
"Mortality.rate.infant.(per.1000.live.births)",
"Mortality.rate.under-five.(per.1000.live.births)")]
heal.overview.final[is.na(heal.overview.final)]=0
heal.overview.final$`HIV.prevalence.adult.(%.ages.15-49)`=heal.overview.final$`HIV.prevalence.adult.(%.ages.15-49)`*10
colnames(heal.overview.final)[3]="HIV.prevalence.adult.(per.1000.ages.15-49)"
heal.life=hdi.databank.m %>%
filter( level %in%  heal.level.in) %>%
filter((year>= date_from) & (year<= date_to)) %>%
filter( indicator_name =="Life expectancy at birth (years)")%>%
select(level,year,hdi)%>%arrange(year,level)%>%drop_na(hdi)%>%
group_by(year,level)%>%  summarise(avg = mean(hdi))
# radar=ggradar(heal.overview.final,grid.mid = 50,grid.max = 100)
# hiv.plot=ggplot(data=heal.overview.final,mapping = aes(x=level,y=`HIV.prevalence.adult.(per.1000.ages.15-49)`))+
#   geom_bar(stat="identity")+
#   coord_flip()
}
return(heal.overview.final)
}
heal.level.in=as.null()
#heal.level.in=c("VERY HIGH HUMAN DEVELOPMENT","LOW HUMAN DEVELOPMENT","MEDIUM HUMAN DEVELOPMENT","HIGH HUMAN DEVELOPMENT")
heal.overview.test=test_heal_plot_fun(heal.level.in,date_from=2013,date_to=2016,
heal.geography.in=c("Arab State","Botswana","Central African Republic","Congo"),plot_type = "")
View(heal.overview.test)
View(heal.overview.test)
heal.overview.test%>%select(c(1,5,6))
colnames(heal.overview.test)
heal.overview.test%>%select(c(1,5,6))%>%gather(key="mortal.index",
"Mortality.rate.infant.(per.1000.live.births)",
"Mortality.rate.under-five.(per.1000.live.births)",
value = "values")
View(heal.overview.test)
test=heal.overview.test%>%select(c(1,5,6))%>%gather(key="mortal.index",
"Mortality.rate.infant.(per.1000.live.births)",
"Mortality.rate.under-five.(per.1000.live.births)",
value = "values")
View(test)
ggplot(data=test)+geom_bar(aes(x=geo,y=value,fill=mortal.index),position = "stock")
ggplot(data=test)+geom_bar(aes(x=geo,y=value,fill=mortal.index),position = "stack")
View(heal.overview.test)
ggplot(data=test)+geom_bar(aes(x=geo,y=values,fill=mortal.index),position = "stack")
ggplot(data=test)+geom_bar(aes(x=geo,y=values,fill=mortal.index),stat = "identity",position = "stack")
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
View(hdi.databank.m)
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
icon
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
runApp('hdi')
out <- capture.output(
bw_iris <- np::npregbw(formula = Petal.Length ~ Sepal.Width + Species,
data = iris)
)
library(np)
install.packages(np)
install.packages("np")
out <- capture.output(
bw_iris <- np::npregbw(formula = Petal.Length ~ Sepal.Width + Species,
data = iris)
)
bw_iris
# Regression
fit_iris <- np::npreg(bw_iris)
summary(fit_iris)
# Plot marginal effects of each predictor on the response
par(mfrow = c(1, 2))
plot(fit_iris, plot.par.mfrow = FALSE)
data(oecdpanel, package = "np")
# Bandwidth by CV for local constant -- use only two starts to reduce the
# computation time
out <- capture.output(
bw_OECD <- np::npregbw(formula = growth ~ factor(oecd) + ordered(year) +
initgdp + popgro + inv + humancap, data = oecdpanel,
regtype = "lc", nmulti = 2)
)
View(oecdpanel)
bw_OECD
# Bandwidth by CV for local constant -- use only two starts to reduce the
# computation time
out <- capture.output(
bw_OECD <- np::npregbw(formula = growth ~ factor(oecd) + ordered(year) +
initgdp + popgro + inv + humancap, data = oecdpanel,
regtype = "lc", nmulti = 2)
)
data(Auto, package = "ISLR")
Auto
data(Auto, package = "ISLR")
# Bandwidth by CV for local constant -- use only two starts to reduce the
# computation time
out <- capture.output(
bw_OECD <- np::npregbw(formula = mpg ~ ordered(cylinders) +
horsepower + weight + origin data = Auto,
regtype = "lc", nmulti = 2)
)
bw_OECD
data(Auto, package = "ISLR")
# Bandwidth by CV for local constant -- use only two starts to reduce the
# computation time
out <- capture.output(
bw_OECD <- np::npregbw(formula = mpg ~ ordered(cylinders) +
horsepower + weight + origin, data = Auto,
regtype = "lc", nmulti = 2)
)
bw_OECD
# Regression
fit_OECD <- np::npreg(bw_OECD)
summary(fit_OECD)
# Plot marginal effects of each predictor on the response
par(mfrow = c(2, 3))
plot(fit_OECD, plot.par.mfrow = FALSE)
Auto
data(Auto, package = "ISLR")
# Bandwidth by CV for local constant -- use only two starts to reduce the
# computation time
out <- capture.output(
bw_OECD <- np::npregbw(formula = mpg ~ ordered(cylinders) +
horsepower + weight + factor(origin), data = Auto,
regtype = "lc", nmulti = 2)
)
bw_OECD
data(Auto, package = "ISLR")
# Bandwidth by CV for local constant -- use only two starts to reduce the
# computation time
out <- capture.output(
bw_OECD <- np::npregbw(formula = mpg ~ ordered(cylinders) +
horsepower + weight + ordered(origin), data = Auto,
regtype = "lc", nmulti = 2)
)
bw_OECD
data(Auto, package = "ISLR")
# Bandwidth by CV for local constant -- use only two starts to reduce the
# computation time
out <- capture.output(
bw_OECD <- np::npregbw(formula = mpg ~ ordered(cylinders) +
horsepower + weight + factor(origin), data = Auto,
regtype = "lc", nmulti = 2)
)
bw_OECD
fit_OECD <- np::npreg(bw_OECD)
summary(fit_OECD)
par(mfrow = c(2, 3))
plot(fit_OECD, plot.par.mfrow = FALSE)
n <- 200
logistic <- function(x) 1 / (1 + exp(-x))
p <- function(x) logistic(1 - 3 * sin(x))
set.seed(123456)
X <- runif(n = n, -3, 3)
Y <- rbinom(n = n, size = 1, prob = p(X))
# Set bandwidth and evaluation grid
h <- 0.25
x <- seq(-3, 3, l = 501)
suppressWarnings(
fit_glm <- sapply(x, function(x) {
K <- dnorm(x = x, mean = X, sd = h)
glm.fit(x = cbind(1, X - x), y = Y, weights = K,
family = binomial())$coefficients[1]
})
)
suppressWarnings(
fit_nlm <- sapply(x, function(x) {
K <- dnorm(x = x, mean = X, sd = h)
nlm(f = function(beta) {
-sum(K * (Y * (beta[1] + beta[2] * (X - x)) -
log(1 + exp(beta[1] + beta[2] * (X - x)))))
}, p = c(0, 0))$estimate[1]
})
)
# Approach 3: employ locfit::locfit
# Bandwidth can not be controlled explicitly - only through nn in ?lp
fit_locfit <- locfit::locfit(Y ~ locfit::lp(X, deg = 1, nn = h),
family = "binomial", kern = "gauss")
install.packages("locfit")
# Approach 3: employ locfit::locfit
# Bandwidth can not be controlled explicitly - only through nn in ?lp
fit_locfit <- locfit::locfit(Y ~ locfit::lp(X, deg = 1, nn = h),
family = "binomial", kern = "gauss")
plot(x, p(x), ylim = c(0, 1.5), type = "l", lwd = 2)
lines(x, logistic(fit_glm), col = 2)
lines(x, logistic(fit_nlm), col = 2, lty = 2)
plot(fit_locfit, add = TRUE, col = 4)
legend("topright", legend = c("p(x)", "glm", "nlm", "locfit"), lwd = 2,
col = c(1, 2, 2, 4), lty = c(1, 2, 1, 1))
plot(x, p(x), ylim = c(0, 1.5), type = "l", lwd = 2)
lines(x, logistic(fit_glm), col = 2)
lines(x, logistic(fit_nlm), col = 2, lty = 2)
plot(fit_locfit, add = TRUE, col = 4)
legend("topright", legend = c("p(x)", "glm", "nlm", "locfit"), lwd = 2,
col = c(1, 2, 2, 4), lty = c(1, 2, 1, 1))
h <- seq(0.1, 2, by = 0.1)
suppressWarnings(
LCV <- sapply(h, function(h) {
sum(sapply(1:n, function(i) {
K <- dnorm(x = X[i], mean = X[-i], sd = h)
nlm(f = function(beta) {
-sum(K * (Y[-i] * (beta[1] + beta[2] * (X[-i] - X[i])) -
log(1 + exp(beta[1] + beta[2] * (X[-i] - X[i])))))
}, p = c(0, 0))$minimum
}))
})
)
plot(h, LCV, type = "o")
abline(v = h[which.max(LCV)], col = 2)
n <- 20
mu0 <- 2; sd0 <- 1
set.seed(12341)
samp <- rnorm(n = n, mean = mu0, sd = sd0)
# Fn vs F0
plot(ecdf(samp), main = "", ylab = "Probability")
curve(pnorm(x, mean = mu0, sd = sd0), add = TRUE, col = 2)
# Maximum distance
samp_sorted <- sort(samp)
Ui <- pnorm(samp_sorted, mean = mu0, sd = sd0)
Dn_plus <- (1:n) / n - Ui
Dn_minus <- Ui - (1:n - 1) / n
i <- which.max(pmax(Dn_plus, Dn_minus))
lines(rep(samp_sorted[i], 2),
c(i / n, pnorm(samp_sorted[i], mean = mu0, sd = sd0)),
col = 4, lwd = 2)
rug(samp)
legend("topleft", lwd = 2, col = c(1:2, 4),
legend = latex2exp::TeX(c("$F_n$", "$F_0$", "sup_x|F_n(x)-F_0(x)|")))
n <- 50
set.seed(3245678)
x <- rnorm(n = n)
# Kolmogorov-Smirnov test for H_0: F = N(0, 1). Does not reject.
(ks <- ks.test(x = x, y = "pnorm")) # In "y" we specify the cdf F0 as a function
# Structure of "htest" class
str(ks)
# Kolmogorov-Smirnov test for H_0: F = N(0.5, 1). Rejects.
ks.test(x = x, y = "pnorm", mean = 0.5)
# Kolmogorov-Smirnov test for H_0: F = Exp(2). Strongly rejects.
ks.test(x = x, y = "pexp", rate = 1/2)
##
##
##  One-sample Kolmogorov-Smirnov test
##
##  One-sample Kolmogorov-Smirnov test
##
##
##  One-sample Kolmogorov-Smirnov test
##
## data:  x
##
##  One-sample Kolmogorov-Smirnov test
##
## data:  x
## D = 0.53495, p-value = 6.85e-14
##
##  One-sample Kolmogorov-Smirnov test
##
## data:  x
## D = 0.53495, p-value = 6.85e-14
## alternative hypothesis: two-sided
##
##  One-sample Kolmogorov-Smirnov test
##
## data:  x
## D = 0.53495, p-value = 6.85e-14
## alternative hypothesis: two-sided
View(hdi.databank.m)
shiny::runApp('hdi')
install.packages("leaflet")
library(leaflet)
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
world <- map("world", fill=TRUE, plot=FALSE)
library(sp)
library(maps)
library(maptools)
world <- map("world", fill=TRUE, plot=FALSE)
world_map <- map2SpatialPolygons(world, sub(":.*$", "", world$names))
View(world_map)
View(world)
world$x
world$names
View(hdi.databank.m)
library(rworldmap)
install.packages('rworldmap')
map=getMap()
library(rworldmap)
map=getMap()
plot(map)
library(tidyverse)
map$ISO3.1
View(hdi.databank.m)
View(hdi.databank.m)
demo.data<-hdi.databank.m%>%filter(indicator_name %in%
c("Total population (millions)","Urban population (%)","Young age (0-14) dependency ratio (per 100 people ages 15-64)","Old-age (65 and older) dependency ratio (per 100 people ages 15-64)"))
View(demo.data)
union(demo.data$indicator_name)
unique(demo.data$indicator_name)
colnames(hdi.databank.m)
demo.data<-hdi.databank.m%>%filter(indicator_name %in%
c("Total population (millions)","Urban population (%)",
"Young age (0-14) dependency ratio (per 100 people ages 15-64)",
"Old-age (65 and older) dependency ratio (per 100 people ages 15-64)"))%>%
select(iso3,country_name,year,hdi,level,Region)
View(demo.data)
demo.data<-hdi.databank.m%>%filter(indicator_name %in%
c("Total population (millions)","Urban population (%)",
"Young age (0-14) dependency ratio (per 100 people ages 15-64)",
"Old-age (65 and older) dependency ratio (per 100 people ages 15-64)"))%>%
filter(year==2017)%>%
select(iso3,country_name,year,hdi,level,Region)
View(demo.data)
demo.data<-hdi.databank.m%>%filter(indicator_name %in%
c("Total population (millions)","Urban population (%)",
"Young age (0-14) dependency ratio (per 100 people ages 15-64)",
"Old-age (65 and older) dependency ratio (per 100 people ages 15-64)"))%>%
filter(year==2017)%>%
select(iso3,country_name,year,indicator_name,hdi,level,Region)%>%
spread(indicator_name,hdi)
View(demo.data)
demo.data<-hdi.databank.m%>%filter(indicator_name %in%
c("Total population (millions)","Urban population (%)",
"Young age (0-14) dependency ratio (per 100 people ages 15-64)",
"Old-age (65 and older) dependency ratio (per 100 people ages 15-64)"))%>%
filter(year==2017)%>%
select(iso3,country_name,year,indicator_name,hdi,level,Region)%>%
spread(indicator_name,hdi)
colnames(demo.data)=gsub(" ",".",colnames(demo.data))
colnames(demo.data)=gsub("%","per",colnames(demo.data))
View(demo.data)
library(leaflet)
library(rworldmap)
map=getMap()
plot(map)
demo.data<-hdi.databank.m%>%filter(indicator_name %in%
c("Total population (millions)","Urban population (%)",
"Young age (0-14) dependency ratio (per 100 people ages 15-64)",
"Old-age (65 and older) dependency ratio (per 100 people ages 15-64)"))%>%
filter(year==2017)%>%
select(iso3,country_name,year,indicator_name,hdi,level,Region)%>%
spread(indicator_name,hdi)
colnames(demo.data)=gsub(" ",".",colnames(demo.data))
colnames(demo.data)=gsub("%","per",colnames(demo.data))
